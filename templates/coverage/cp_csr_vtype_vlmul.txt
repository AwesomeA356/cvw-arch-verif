    // different vlmul coverpoints for different sew conditions
    //////////////////////////////////////////////////////////////////////////
`ifdef SEW64
    cp_csr_vtype_vlmul_effew64 : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, "vtype", "vlmul")  iff (ins.trap == 0 )  {
        // Value of VTYPE.vlmul (vector register grouping) for SEW = 64
        bins one = {3'b000};
        bins randlegal = {[3'b001, 3'b010, 3'b011, 3'b111, 3'b110, 3'b101]};
    }

    cp_csr_vtype_vlmul : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, "vtype", "vlmul")  iff (ins.trap == 0 & sew == 32)  {
        // Value of VTYPE.vlmul (vector register grouping) for SEW = 32
        bins one = {3'b000};
        bins randlegal = {[3'b001, 3'b010, 3'b011, 3'b111, 3'b110]};
    }

    cp_csr_vtype_vlmul : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, "vtype", "vlmul")  iff (ins.trap == 0 & sew == 16)  {
        // Value of VTYPE.vlmul (vector register grouping) for SEW = 16
        bins one = {3'b000};
        bins randlegal = {[3'b001, 3'b010, 3'b011, 3'b111]};
    }

    cp_csr_vtype_vlmul : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, "vtype", "vlmul")  iff (ins.trap == 0 & sew == 8)  {
        // Value of VTYPE.vlmul (vector register grouping) for SEW = 8
        bins one = {3'b000};
        bins randlegal = {[3'b001, 3'b010, 3'b011]};
    }
    //////////////////////////////////////////////////////////////////////////
